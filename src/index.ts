import showdown from 'showdown'
import scopeCss from 'scope-css'
import shortid from 'shortid'
import h from 'hyperscript'
import { createIndentedFilter, stripIndent } from 'indent-utils'
import eqdict from '@patarapolw/eqdict'

const ext: Record<string, showdown.ShowdownExtension> = {}

export default class ShowdownExtra {
  static ext = ext

  id: string
  frontmatterName: string
  converter: showdown.Converter
  ext: Record<string, showdown.ShowdownExtension>

  lastHtml: string
  lastMetadata: {
    value: string
    type: string
  }

  /**
   * Options:
   * - [options.id] Unique ID, to be able to contain CSS (default: autogenerated)
   * - [options.flavor] Markdown flavor (default: "github")
   * - [options.frontmatter] Whether to parse YAML frontmatter (default: false)
   */
  constructor (options: {
    id?: string
    flavor?: showdown.Flavor
    frontmatter?: boolean | string
  } = {}) {
    const {
      id = `showdown-extra__${shortid.generate()}`,
      flavor = 'github',
      frontmatter
    } = options

    this.id = id
    this.frontmatterName = typeof frontmatter === 'string' ? frontmatter : 'Front Matter'

    this.converter = new showdown.Converter({
      parseImgDimensions: true,
      simplifiedAutoLink: true,
      strikethrough: true,
      tables: true,
      disableForced4SpacesIndentedSublists: true,
      backslashEscapesHTMLTags: true,
      emoji: true,
      metadata: !!frontmatter
    })

    if (flavor) {
      this.converter.setFlavor(flavor)
    }

    this.ext = {
      youtube: {
        type: 'lang',
        filter: createIndentedFilter('youtube', (s) => {
          return stripIndent(`
          <iframe width="560" height="315" 
            src="https://www.youtube.com/embed/${s}"
            frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen></iframe>`)
        })
      },
      spoiler: {
        type: 'lang',
        filter: createIndentedFilter('spoiler', (s, { summary }) => {
          return h('details', {
            style: {
              'margin-bottom': '1rem'
            }
          }, [
            h('summary', summary || 'spoiler'),
            h('div', { innerHTML: s })
          ]).outerHTML
        })
      },
      blur: {
        type: 'lang',
        filter: createIndentedFilter('blur', (s) => {
          return h('div', {
            style: {
              filter: 'blur(10px)'
            },
            attrs: {
              onclick: 'this.style.filter = this.style.filter ? "" : this.getAttribute("data-filter")',
              'data-filter': 'blur(10px)'
            },
            innerHTML: this.converter.makeHtml(s)
          }).outerHTML
        })
      },
      markdown: {
        type: 'lang',
        regex: /<markdown([^>]*)>(.*?)<\/markdown>/gsi,
        replace: (p0: string, p1: string, p2: string) => {
          const attrs = eqdict(p1.trim())
          const indentRegex = attrs.indent ? new RegExp(`^ {1, ${parseInt(attrs.indent)}}`) : null
          const innerHTML = p2.replace(/^\n/, '').replace(/\n$/, '')

          return `<div data-markdown ${p1}>${
            indentRegex === null
              ? stripIndent(innerHTML)
              : innerHTML.split('\n').map((line) => line.replace(indentRegex, '')).join('\n')
          }</div>`
        }
      }
    }

    Object.entries(ext).map(([k, v]) => this.converter.addExtension(v, k))
    Object.entries(this.ext).map(([k, v]) => this.converter.addExtension(v, `this.${k}`))

    this.lastHtml = ''
    this.lastMetadata = {
      value: '',
      type: 'yaml'
    }
  }

  parse (s: string): string {
    try {
      this.lastHtml = this.converter.makeHtml(s)
      const m = this.converter.getMetadata(true)
      this.lastMetadata = {
        value: typeof m === 'string' ? m : JSON.stringify(m),
        type: this.converter.getMetadataFormat()
      }
    } catch (e) {}

    return this.activate(this._finalizeHtml(this.lastHtml, this.lastMetadata))
  }

  activate (output: string): string {
    if (typeof window !== 'undefined') {
      const div = document.getElementById(this.id) || document.createElement('div')
      div.innerHTML = output

      Array.from(div.getElementsByTagName('style')).forEach((el0) => {
        const html = el0.innerHTML.trim()

        if (html) {
          el0.innerHTML = scopeCss(html, `#${this.id}`)
        }
      })

      Array.from(div.getElementsByTagName('script')).forEach((el0) => {
        el0.remove()
      })

      Array.from(div.getElementsByTagName('link')).forEach((el0) => {
        el0.remove()
      })

      return div.innerHTML
    }

    return output
  }

  _finalizeHtml (s: string, metadata: {
    value: string
    type: string
  }): string {
    return h('div', { id: this.id }, [
      ...(metadata.value ? [
        h('details', { attrs: { open: '' } }, [
          h('summary', this.frontmatterName),
          h('pre', [
            h(`code.language-${metadata.type || 'yaml'}`, metadata.value)
          ])
        ])
      ] : []),
      h('main', { innerHTML: s })
    ]).outerHTML
  }
}
