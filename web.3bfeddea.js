parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"tngL":[function(require,module,exports) {

},{}],"Focm":[function(require,module,exports) {
var n=CodeMirror.fromTextArea(document.getElementById("editor"),{mode:{name:"yaml-frontmatter",base:"markdown"},extraKeys:{Tab:function(n){return n.execCommand("indentMore")},"Shift-Tab":function(n){return n.execCommand("indentLess")}},matchTags:!0,matchBrackets:!0,autoCloseBrackets:!0,lineWrapping:!0});n.setSize("100%","100%");var e=new ShowdownExtra({frontmatter:!0});function t(t){var o="string"==typeof t?t:n.getValue(),a=e.parse(o),s=document.getElementById("output");s.innerHTML=a,s.querySelectorAll("pre code").forEach(function(n){Prism.highlightElement(n)})}n.on("change",t),n.setValue("---\ntitle: Awesome front matter\nisCool: true\nnumbers:\n  - a-list: 1\n---\n\n# showdown-extra\n\nMy custom Showdown.js settings, with CSS and Pug support.\n\n## Extended syntaxes\n\nThese are options of Showdown.js, which I have enabled.\n\n- [emoji](https://github.com/showdownjs/showdown/wiki/Emojis)\n\n:smile: :100:\n\n- Table\n\n| h1    |    h2   |      h3 |\n|:------|:-------:|--------:|\n| 100   | [a][1]  | ![b][2] |\n| *foo* | **bar** | ~~baz~~ |\n\n## Custom syntaxes\n\nThese are supported, unlike <https://github.com/patarapolw/showdown-extra/tree/master/README.md> (Please view on GitHub to see differences.)\n\nCSS is supported, but is scoped to prevent leakage.\n\n```html\n<style>\nh1 {\n  color: red;\n}\n</style>\n```\n\n<style>\nh1 {\n  color: red;\n}\n</style>\n\nJavaScript, however, is not enabled.\n\n```html\n<script>\nalert('hello')\n<\/script>\n```\n\n<script>\nalert('hello')\n<\/script>\n\n#{span(style=\"color: green;\") Pug-like syntax:} [HyperPug](https://github.com/patarapolw/hyperpug) is also supported.\n\n^^youtube 9xwazD5SyVg\n\nThe `^^` syntax is powered by <https://github.com/patarapolw/indent-utils>.\n\n## Installation\n\n```bash\nyarn add https://github.com/patarapolw/showdown-extra.git\n# or\n# npm add https://github.com/patarapolw/showdown-extra.git\n```\n\nOr if you don't use Node.js or NPM\n\n```html\n<script src=\"https://patarpolw.github.io/showdown-extra/showdown-extra.js\"><\/script>\n```\n\nNow, `ShowdownExtra` will be available as a global variable.\n\nAfter that,\n\n```js\nvar showdownExtra = new ShowdownExtra({\n  frontmatter: true\n})\ndocument.getElementById('output').innerHTML = showdownExtra.parse('# Awesome string')\n```\n\nFor more settings and default options, see <https://github.com/patarapolw/showdown-extra/tree/master/index.js>\n\n## Contributions\n\nPlease either open an [issue](https://github.com/patarapolw/showdown-extra/issues), or fork the project and make pull requests.\n\nSuggestions welcome.\n");
},{"fs":"tngL"}]},{},["Focm"], null)
//# sourceMappingURL=/showdown-extra/web.3bfeddea.js.map